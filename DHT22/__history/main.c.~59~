#include <main.h>
#use fast_io(B)

#define DATA PIN_B5                    //Pin del bus de un hilo para el DHT11
unsigned int trama[5];                 //Vector donde se alojan los datos
unsigned int recibeByte()              //Funcion que recibe un Byte
{
   unsigned int8 valorLeido = 0;       //Valor de retorno de la funcion
   int8 i=0;
   for(i=0; i<8; i++)                  //Iteracion para recepcion de bits
   {
      valorLeido <<= 1;                //Registro de desplazamiento de bits
      while(!input(DATA));             //Espera a DATA = 0
      delay_us(30);                    //Demora de 30us (Del Datasheet)
      if(input(DATA))                  //Pregunta si DATA = 1
      {
          valorLeido |= 1;             //Realiza toggle del valor leido
      }
      while(input(DATA));              //Espera a DATA = 1
   }
   return valorLeido;                  //Retorna el valor leido
}
unsigned int recibeDato()              //Funcion que recibe el Dato
{
   int validacion = 0;                 //Variable de Validacion
   int checksum = 0;                   //Variable de deteccion de cambios de secuencia
   int8 j=0;                           //Variable para el lazo for
   output_high(DATA);                  //Set DATA = 1  
   output_low(DATA);                   //Set DATA = 0
   delay_ms(18);                       //Demora de 18ms (Del Datasheet)
   output_high(DATA);                  //Set DATA = 1
   delay_us(25);                       //Demora de 25ms (Del Datasheet)
   validacion = input(DATA);           //Mueve valor de DATA a Validacion
   if(validacion)                      //Si Validacion = 1, Sensor no encontrado
   {
      printf( "Sensor no encontrado. \r");                      
   }
   delay_us(80);                       //Espera 80us (Del Datasheet)
   validacion = input(DATA);           //Mueve valor de DATA a Validacion
   if(!validacion)                     //Si Validacion = 0, Error de secuencia
   {
      printf( "Error en secuencia (Checksum) \r");  
   }
   delay_us(80);                       //Espera 80us (Del Datasheet)
   for(j=0; j<5; j++)                  //Lazo de carga de bytes de datos
   {
       trama[j] = recibeByte();        //Carga del vector de datos
   }
   output_high(DATA);                  //Set DATA = 1
   for(j=0; j<4; j++)                  //Lazo de carga de bytes de verificacion
   {
       checksum += trama[j];           //Carga de bytes de verificacion
   }
   if(checksum == trama[4])            //Si la secuencia de verificacion es correcta
   {
      return 0;                        //Se retorna 0 y se realiza la lectura
   }
}
void main()
{
   setup_timer_0(RTCC_INTERNAL|RTCC_DIV_1);
   setup_timer_1(T1_DISABLED);
   setup_timer_2(T2_DISABLED,0,1);
   while(TRUE)
   {
      if(recibeDato()==0)              //Si el retorno es 0, se imprime en terminal
         printf( "Temp: %2u - R.H: %2u \r", trama[2], trama[0]);
      delay_ms(500);
   }
}


//!#define DHT11_PIN PIN_B5                              // Connection pin between DHT11 and mcu
//! 
//!char message1[] = "Temp = 00.0 C  ";
//!char message2[] = "RH   = 00.0 %  ";
//!short Time_out;
//!unsigned int8 T_byte1, T_byte2, RH_byte1, RH_byte2, CheckSum ;
//!unsigned int rh=0,t=0;
//!
//!void start_signal(){
//!  output_drive(DHT11_PIN);                            // Configure connection pin as output
//!  output_low(DHT11_PIN);                              // Connection pin output low
//!  delay_ms(25);
//!  output_high(DHT11_PIN);                             // Connection pin output high
//!  delay_us(30);
//!  output_float(DHT11_PIN);                            // Configure connection pin as input
//!}
//!
//!short check_response(){
//!  delay_us(40);
//!  if(!input(DHT11_PIN)){                              // Read and test if connection pin is low
//!    delay_us(80);
//!    if(input(DHT11_PIN)){                             // Read and test if connection pin is high
//!      delay_us(50);
//!      return 1;
//!    }
//!  }
//!}
//!unsigned int8 Read_Data(){
//!  unsigned int8 i, k, _data = 0;                      // k is used to count 1 bit reading duration
//!  if(Time_out)
//!    break;
//!  for(i = 0; i < 8; i++){
//!    k = 0;
//!    while(!input(DHT11_PIN)){                         // Wait until DHT11 pin get raised
//!      k++;
//!      if(k > 100){
//!        Time_out = 1;
//!        break;
//!      }
//!      delay_us(1);
//!    }
//!    delay_us(30);
//!    if(!input(DHT11_PIN))
//!      bit_clear(_data, (7 - i));                      // Clear bit (7 - i)
//!    else{
//!      bit_set(_data, (7 - i));                        // Set bit (7 - i)
//!      while(input(DHT11_PIN)){                        // Wait until DHT11 pin goes low
//!        k++;
//!        if(k > 100){
//!        Time_out = 1;
//!        break;
//!      }
//!      delay_us(1);}
//!    }
//!  }
//!  return _data;
//!}
//!
//!void main() {
//!  delay_ms(1000);
//!  printf("\r\n");
//!  while(TRUE){
//!    Time_out = 0;
//!    Start_signal();
//!    if(check_response()){                             // If there is a response from sensor
//!      RH_byte1 = Read_Data();                         // read RH byte1
//!      RH_byte2 = Read_Data();                         // read RH byte2
//!      rh=RH_byte1<<8;
//!      rh|=RH_byte2;
//!      T_byte1 = Read_Data();                          // read T byte1
//!      T_byte2 = Read_Data();                          // read T byte2
//!      t=T_byte1<<8;
//!      t|=T_byte2;
//!      Checksum = Read_Data();                         // read checksum
//!      if(Time_out){                                   // If reading takes long time    
//!        printf("Time out!\r\n");
//!      }
//!      else{
//!       if(CheckSum == ((RH_Byte1 + RH_Byte2 + T_Byte1 + T_Byte2) & 0xFF)){
//!         message1[7]  = T_Byte1/10  + 48;
//!         message1[8]  = T_Byte1%10  + 48;
//!         message1[10] = T_Byte2/10  + 48;
//!         message2[7]  = RH_Byte1/10 + 48;
//!         message2[8]  = RH_Byte1%10 + 48;
//!         message2[10] = RH_Byte2/10 + 48;
//!         printf("%u  ",t);
//!         printf("%u  \r\n",rh);
//!         printf("%s  ",message1);                   // Display message1
//!         printf("%s\r\n",message2);                   // Display message2
//!       }
//!       else{
//!         printf("Checksum Error!\r\n");
//!       }
//!      }
//!    }
//!    else {
//!      printf("No response from the sensor\r\n");
//!    }
//!  delay_ms(1000);
//!  }
//!}
//!
